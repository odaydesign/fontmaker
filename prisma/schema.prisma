// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  username          String              @unique
  displayName       String?
  passwordHash      String?             // Nullable for OAuth users
  avatarUrl         String?
  emailVerified     DateTime?
  subscriptionTier  SubscriptionTier    @default(FREE)
  tokensRemaining   Int                 @default(50)
  stripeCustomerId  String?             @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  fonts             Font[]
  subscriptions     Subscription[]
  tokenTransactions TokenTransaction[]
  likes             Like[]
  profile           UserProfile?
  accounts          Account[]           // For OAuth
  sessions          Session[]           // For NextAuth

  @@index([email])
  @@index([username])
  @@index([stripeCustomerId])
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// USER PROFILE & SOCIAL
// ============================================

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  bio             String?   @db.Text
  website         String?
  twitterHandle   String?
  instagramHandle String?
  behanceProfile  String?
  featuredFontIds String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ============================================
// SUBSCRIPTION & BILLING
// ============================================

enum SubscriptionTier {
  FREE
  PRO
  BUSINESS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  PAUSED
  TRIALING
}

model Subscription {
  id                    String              @id @default(uuid())
  userId                String
  stripeSubscriptionId  String?             @unique
  planType              SubscriptionTier
  status                SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeSubscriptionId])
}

// ============================================
// TOKEN SYSTEM
// ============================================

enum TokenTransactionType {
  PURCHASE
  SUBSCRIPTION_GRANT
  SIGNUP_BONUS
  REFERRAL_BONUS
  ADMIN_GRANT
  AI_IMAGE_GENERATION
  FONT_GENERATION
  REFUND
}

model TokenTransaction {
  id          String                @id @default(uuid())
  userId      String
  amount      Int                   // Positive for additions, negative for deductions
  type        TokenTransactionType
  description String?
  metadata    Json?                 // Store additional data like font_id, image_id, etc.
  createdAt   DateTime              @default(now())

  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// ============================================
// FONTS & ASSETS
// ============================================

model Font {
  id            String    @id @default(uuid())
  name          String
  description   String?   @db.Text
  author        String?
  isPublic      Boolean   @default(false)
  downloadCount Int       @default(0)
  likeCount     Int       @default(0)
  viewCount     Int       @default(0)
  license       String    @default("personal") // "personal" or "commercial"
  thumbnailUrl  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?

  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  characterMappings CharacterMapping[]
  sourceImages      SourceImage[]
  fontFiles         FontFile[]
  tags              FontTag[]
  likes             Like[]

  @@index([userId])
  @@index([isPublic])
  @@index([createdAt])
  @@index([likeCount])
  @@index([downloadCount])
}

model SourceImage {
  id            String    @id @default(uuid())
  url           String
  storageKey    String?
  isAiGenerated Boolean   @default(false)
  aiPrompt      String?
  width         Int?
  height        Int?
  createdAt     DateTime  @default(now())
  
  fontId        String
  font          Font      @relation(fields: [fontId], references: [id], onDelete: Cascade)
  
  characterMappings CharacterMapping[]
}

model CharacterMapping {
  id                String    @id @default(uuid())
  char              String
  x1                Float
  y1                Float
  x2                Float
  y2                Float
  originalImageWidth  Float?
  originalImageHeight Float?
  charImageUrl     String?
  charImageKey     String?
  createdAt        DateTime  @default(now())
  
  fontId           String
  font             Font      @relation(fields: [fontId], references: [id], onDelete: Cascade)
  
  sourceImageId    String
  sourceImage      SourceImage @relation(fields: [sourceImageId], references: [id], onDelete: Cascade)
}

model FontFile {
  id            String    @id @default(uuid())
  format        String    // e.g., "ttf", "otf", "woff2"
  url           String?
  storageKey    String?
  fileSize      Int?
  downloadCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  fontId        String
  font          Font      @relation(fields: [fontId], references: [id], onDelete: Cascade)
}

model FontTag {
  id        String   @id @default(uuid())
  name      String

  fontId    String
  font      Font     @relation(fields: [fontId], references: [id], onDelete: Cascade)

  @@unique([fontId, name])
  @@index([name])
}

// ============================================
// SOCIAL & ENGAGEMENT
// ============================================

model Like {
  id        String   @id @default(uuid())
  userId    String
  fontId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  font      Font     @relation(fields: [fontId], references: [id], onDelete: Cascade)

  @@unique([userId, fontId])
  @@index([fontId])
  @@index([userId])
}
